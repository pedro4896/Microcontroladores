
cronometroDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000752  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067c  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a3  00000000  00000000  000010c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019c  00000000  00000000  000017a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int estouro = 0;
int segundos = 0;
int digitos[2];

int main(void){
	cli(); // desabilita a interrup??o global
  90:	f8 94       	cli
	TCNT0 = 0; //registrador que armazena o valaor atual da contagem
  92:	16 bc       	out	0x26, r1	; 38
	TCCR0B = (1<<CS02); // PRESCALE DE 1:256
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0); //Habilita a interrup??o por estouro
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei(); //Habilita as interrup??es gerais
  9e:	78 94       	sei
	DDRD = 0b11111111;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00001111;
  a4:	8f e0       	ldi	r24, 0x0F	; 15
  a6:	84 b9       	out	0x04, r24	; 4
	PORTD = 0;
  a8:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0;
  aa:	15 b8       	out	0x05, r1	; 5
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x1c>

000000ae <escreveDigitos>:
	
	while(1){}
}

void escreveDigitos(int numero, int array[]) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	eb 01       	movw	r28, r22
	for (int i = 2 - 1; i >= 0; i--) {
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	0f c0       	rjmp	.+30     	; 0xd8 <escreveDigitos+0x2a>
		array[i] = numero % 10;
  ba:	f9 01       	movw	r30, r18
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	ec 0f       	add	r30, r28
  c2:	fd 1f       	adc	r31, r29
  c4:	6a e0       	ldi	r22, 0x0A	; 10
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__divmodhi4>
  cc:	91 83       	std	Z+1, r25	; 0x01
  ce:	80 83       	st	Z, r24
		numero /= 10;
  d0:	86 2f       	mov	r24, r22
  d2:	97 2f       	mov	r25, r23
	
	while(1){}
}

void escreveDigitos(int numero, int array[]) {
	for (int i = 2 - 1; i >= 0; i--) {
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	31 09       	sbc	r19, r1
  d8:	33 23       	and	r19, r19
  da:	7c f7       	brge	.-34     	; 0xba <escreveDigitos+0xc>
		array[i] = numero % 10;
		numero /= 10;
	}
	PORTB = digitos[1];
  dc:	e4 e0       	ldi	r30, 0x04	; 4
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	82 81       	ldd	r24, Z+2	; 0x02
  e2:	85 b9       	out	0x05, r24	; 5
	PORTD = digitos[0];
  e4:	80 81       	ld	r24, Z
  e6:	8b b9       	out	0x0b, r24	; 11
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <__vector_16>:

ISR(TIMER0_OVF_vect){
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	estouro++;
 110:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <estouro>
 114:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <estouro+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <estouro+0x1>
 11e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <estouro>
	if(estouro==248){
 122:	88 3f       	cpi	r24, 0xF8	; 248
 124:	91 05       	cpc	r25, r1
 126:	09 f5       	brne	.+66     	; 0x16a <__vector_16+0x7c>
		estouro=0;
 128:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <estouro+0x1>
 12c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <estouro>
		if(segundos > 60){
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 138:	8d 33       	cpi	r24, 0x3D	; 61
 13a:	91 05       	cpc	r25, r1
 13c:	4c f0       	brlt	.+18     	; 0x150 <__vector_16+0x62>
			segundos = 0;
 13e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTB = segundos;
 146:	15 b8       	out	0x05, r1	; 5
			PORTD = segundos;
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	04 c0       	rjmp	.+8      	; 0x158 <__vector_16+0x6a>
		}else{
			escreveDigitos(segundos, digitos);
 150:	64 e0       	ldi	r22, 0x04	; 4
 152:	71 e0       	ldi	r23, 0x01	; 1
 154:	0e 94 57 00 	call	0xae	; 0xae <escreveDigitos>
		}
		segundos++;
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__divmodhi4>:
 18c:	97 fb       	bst	r25, 7
 18e:	07 2e       	mov	r0, r23
 190:	16 f4       	brtc	.+4      	; 0x196 <__divmodhi4+0xa>
 192:	00 94       	com	r0
 194:	07 d0       	rcall	.+14     	; 0x1a4 <__divmodhi4_neg1>
 196:	77 fd       	sbrc	r23, 7
 198:	09 d0       	rcall	.+18     	; 0x1ac <__divmodhi4_neg2>
 19a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__udivmodhi4>
 19e:	07 fc       	sbrc	r0, 7
 1a0:	05 d0       	rcall	.+10     	; 0x1ac <__divmodhi4_neg2>
 1a2:	3e f4       	brtc	.+14     	; 0x1b2 <__divmodhi4_exit>

000001a4 <__divmodhi4_neg1>:
 1a4:	90 95       	com	r25
 1a6:	81 95       	neg	r24
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	08 95       	ret

000001ac <__divmodhi4_neg2>:
 1ac:	70 95       	com	r23
 1ae:	61 95       	neg	r22
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255

000001b2 <__divmodhi4_exit>:
 1b2:	08 95       	ret

000001b4 <__udivmodhi4>:
 1b4:	aa 1b       	sub	r26, r26
 1b6:	bb 1b       	sub	r27, r27
 1b8:	51 e1       	ldi	r21, 0x11	; 17
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <__udivmodhi4_ep>

000001bc <__udivmodhi4_loop>:
 1bc:	aa 1f       	adc	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	a6 17       	cp	r26, r22
 1c2:	b7 07       	cpc	r27, r23
 1c4:	10 f0       	brcs	.+4      	; 0x1ca <__udivmodhi4_ep>
 1c6:	a6 1b       	sub	r26, r22
 1c8:	b7 0b       	sbc	r27, r23

000001ca <__udivmodhi4_ep>:
 1ca:	88 1f       	adc	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	5a 95       	dec	r21
 1d0:	a9 f7       	brne	.-22     	; 0x1bc <__udivmodhi4_loop>
 1d2:	80 95       	com	r24
 1d4:	90 95       	com	r25
 1d6:	bc 01       	movw	r22, r24
 1d8:	cd 01       	movw	r24, r26
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
