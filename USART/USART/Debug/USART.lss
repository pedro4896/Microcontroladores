
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4f  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f5  00000000  00000000  00000dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049d  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024a  00000000  00000000  00001f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000021b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	20 4c       	sbci	r18, 0xC0	; 192
  6a:	65 69       	ori	r22, 0x95	; 149
  6c:	74 75       	andi	r23, 0x54	; 84
  6e:	72 61       	ori	r23, 0x12	; 18
  70:	20 61       	ori	r18, 0x10	; 16
  72:	6e 61       	ori	r22, 0x1E	; 30
  74:	6c f3       	brlt	.-38     	; 0x50 <__SREG__+0x11>
  76:	67 69       	ori	r22, 0x97	; 151
  78:	63 61       	ori	r22, 0x13	; 19
  7a:	3a 20       	and	r3, r10
	...

0000007e <__ctors_end>:
  7e:	11 24       	eor	r1, r1
  80:	1f be       	out	0x3f, r1	; 63
  82:	cf ef       	ldi	r28, 0xFF	; 255
  84:	d8 e0       	ldi	r29, 0x08	; 8
  86:	de bf       	out	0x3e, r29	; 62
  88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

//float voltage();
int ADC_valor;

int main(void){
	sei(); //Habilita as interrupções gerais
  a6:	78 94       	sei
	USART_Inic(MYUBRR);
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 a5 00 	call	0x14a	; 0x14a <USART_Inic>
	ADMUX = (1<<REFS0) | (1<<MUX1);
  b0:	82 e4       	ldi	r24, 0x42	; 66
  b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	//ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
	ADCSRA = 0b11101111;
  b6:	8f ee       	ldi	r24, 0xEF	; 239
  b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0b00000000;
  bc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	
	DDRC = 0b00000000;
  c0:	17 b8       	out	0x07, r1	; 7
	PORTC = 0b11111011;
  c2:	8b ef       	ldi	r24, 0xFB	; 251
  c4:	88 b9       	out	0x08, r24	; 8
	set_bit(DIDR0,2); //registrador para controle de entrada ADC
  c6:	ee e7       	ldi	r30, 0x7E	; 126
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	80 83       	st	Z, r24
	
    while (1) {
		escreve_USART_Flash(msg);
  d0:	88 e6       	ldi	r24, 0x68	; 104
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 b9 00 	call	0x172	; 0x172 <escreve_USART_Flash>
		//ident_num((float)voltage(),digitos);
		ident_num(ADC_valor,digitos);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	71 e0       	ldi	r23, 0x01	; 1
  dc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ADC_valor>
  e0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <ADC_valor+0x1>
  e4:	0e 94 c9 00 	call	0x192	; 0x192 <ident_num>
		
		USART_Transmite(digitos[3]);
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  ea:	d1 e0       	ldi	r29, 0x01	; 1
  ec:	8b 81       	ldd	r24, Y+3	; 0x03
  ee:	0e 94 b2 00 	call	0x164	; 0x164 <USART_Transmite>
		USART_Transmite(digitos[2]);
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	0e 94 b2 00 	call	0x164	; 0x164 <USART_Transmite>
		USART_Transmite(digitos[1]);
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	0e 94 b2 00 	call	0x164	; 0x164 <USART_Transmite>
		USART_Transmite(digitos[0]);
  fe:	88 81       	ld	r24, Y
 100:	0e 94 b2 00 	call	0x164	; 0x164 <USART_Transmite>
		USART_Transmite('\n');
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	0e 94 b2 00 	call	0x164	; 0x164 <USART_Transmite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	83 ed       	ldi	r24, 0xD3	; 211
 10e:	90 e3       	ldi	r25, 0x30	; 48
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x6a>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x74>
 11a:	00 00       	nop
 11c:	d9 cf       	rjmp	.-78     	; 0xd0 <main+0x2a>

0000011e <__vector_21>:
		_delay_ms(1000);
    }
}

ISR(ADC_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	ADC_valor = ADC;
 12c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 130:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 134:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ADC_valor+0x1>
 138:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ADC_valor>
}
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <USART_Inic>:
}
//------------------------------------------------------------------------------------
void escreve_USART(char *c) //escreve String (RAM)
{
	for (; *c!=0;c++) USART_Transmite(*c);
}
 14a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 14e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 152:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 156:	88 e1       	ldi	r24, 0x18	; 24
 158:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 162:	08 95       	ret

00000164 <USART_Transmite>:
 164:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 168:	95 ff       	sbrs	r25, 5
 16a:	fc cf       	rjmp	.-8      	; 0x164 <USART_Transmite>
 16c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 170:	08 95       	ret

00000172 <escreve_USART_Flash>:
//------------------------------------------------------------------------------------
void escreve_USART_Flash(const char *c) //escreve String (Flash)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
	for (;pgm_read_byte(&(*c))!=0;c++) USART_Transmite(pgm_read_byte(&(*c)));
 178:	05 c0       	rjmp	.+10     	; 0x184 <escreve_USART_Flash+0x12>
 17a:	fe 01       	movw	r30, r28
 17c:	84 91       	lpm	r24, Z
 17e:	0e 94 b2 00 	call	0x164	; 0x164 <USART_Transmite>
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	fe 01       	movw	r30, r28
 186:	84 91       	lpm	r24, Z
 188:	81 11       	cpse	r24, r1
 18a:	f7 cf       	rjmp	.-18     	; 0x17a <escreve_USART_Flash+0x8>
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <ident_num>:
//------------------------------------------------------------------------------------
//Conversão de um número em seus digitos individuais
//------------------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{
 192:	ac 01       	movw	r20, r24
 194:	fb 01       	movw	r30, r22
	unsigned char n;
	for(n=0; n<tam_vetor; n++)
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	06 c0       	rjmp	.+12     	; 0x1a6 <ident_num+0x14>
	disp[n] = 0 + conv_ascii; //limpa vetor para armazenagem dos digitos
 19a:	df 01       	movw	r26, r30
 19c:	a8 0f       	add	r26, r24
 19e:	b1 1d       	adc	r27, r1
 1a0:	90 e3       	ldi	r25, 0x30	; 48
 1a2:	9c 93       	st	X, r25
//Conversão de um número em seus digitos individuais
//------------------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{
	unsigned char n;
	for(n=0; n<tam_vetor; n++)
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	85 30       	cpi	r24, 0x05	; 5
 1a8:	c0 f3       	brcs	.-16     	; 0x19a <ident_num+0x8>
	disp[n] = 0 + conv_ascii; //limpa vetor para armazenagem dos digitos
	do
	{
		*disp = (valor%10) + conv_ascii; //pega o resto da divisão por 10
 1aa:	9a 01       	movw	r18, r20
 1ac:	ad ec       	ldi	r26, 0xCD	; 205
 1ae:	bc ec       	ldi	r27, 0xCC	; 204
 1b0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__umulhisi3>
 1b4:	96 95       	lsr	r25
 1b6:	87 95       	ror	r24
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	9c 01       	movw	r18, r24
 1c2:	22 0f       	add	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	82 0f       	add	r24, r18
 1d4:	93 1f       	adc	r25, r19
 1d6:	9a 01       	movw	r18, r20
 1d8:	28 1b       	sub	r18, r24
 1da:	39 0b       	sbc	r19, r25
 1dc:	c9 01       	movw	r24, r18
 1de:	80 5d       	subi	r24, 0xD0	; 208
 1e0:	81 93       	st	Z+, r24
		valor /=10; //pega o inteiro da divisão por 10
 1e2:	9a 01       	movw	r18, r20
 1e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__umulhisi3>
 1e8:	ac 01       	movw	r20, r24
 1ea:	56 95       	lsr	r21
 1ec:	47 95       	ror	r20
 1ee:	56 95       	lsr	r21
 1f0:	47 95       	ror	r20
 1f2:	56 95       	lsr	r21
 1f4:	47 95       	ror	r20
		disp++;
	}while (valor!=0);
 1f6:	41 15       	cp	r20, r1
 1f8:	51 05       	cpc	r21, r1
 1fa:	b9 f6       	brne	.-82     	; 0x1aa <ident_num+0x18>
 1fc:	08 95       	ret

000001fe <__umulhisi3>:
 1fe:	a2 9f       	mul	r26, r18
 200:	b0 01       	movw	r22, r0
 202:	b3 9f       	mul	r27, r19
 204:	c0 01       	movw	r24, r0
 206:	a3 9f       	mul	r26, r19
 208:	70 0d       	add	r23, r0
 20a:	81 1d       	adc	r24, r1
 20c:	11 24       	eor	r1, r1
 20e:	91 1d       	adc	r25, r1
 210:	b2 9f       	mul	r27, r18
 212:	70 0d       	add	r23, r0
 214:	81 1d       	adc	r24, r1
 216:	11 24       	eor	r1, r1
 218:	91 1d       	adc	r25, r1
 21a:	08 95       	ret

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
