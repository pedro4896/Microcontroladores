
introducao.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068a  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  0000083a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000227  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  000013d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#define setbit(port,bit) port |= (1<<bit) //macro SETBIT
#define clearbit(port,bit) port &= ~(1<<bit) //macro CLEARBIT

int main(void){
	DDRD = 0b00001111;
  80:	8f e0       	ldi	r24, 0x0F	; 15
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  84:	1b b8       	out	0x0b, r1	; 11
#include <util/delay.h> //so funciona se definir a frenquencia do cristal

#define setbit(port,bit) port |= (1<<bit) //macro SETBIT
#define clearbit(port,bit) port &= ~(1<<bit) //macro CLEARBIT

int main(void){
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
    while (1) { //loop infinito
		/*PORTD = PORTD |(1 << 0); //SET BIT PD0
		// PORTD |= (1<<0);
		PORTD &= ~(1<<0); //CLEAR BIT PD0*/
		
		if((PIND&(1 << 7))){
  8a:	4f 9b       	sbis	0x09, 7	; 9
  8c:	04 c0       	rjmp	.+8      	; 0x96 <main+0x16>
			c++; 
  8e:	01 96       	adiw	r24, 0x01	; 1
			while((PIND&(1 << 7))){}
  90:	4f 99       	sbic	0x09, 7	; 9
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x10>
  94:	03 c0       	rjmp	.+6      	; 0x9c <main+0x1c>
		}else{
			PORTD &= ~(1 << 0);
  96:	2b b1       	in	r18, 0x0b	; 11
  98:	2e 7f       	andi	r18, 0xFE	; 254
  9a:	2b b9       	out	0x0b, r18	; 11
		}
		
		if(c==1){
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 05       	cpc	r25, r1
  a0:	19 f4       	brne	.+6      	; 0xa8 <main+0x28>
			PORTD |= (1 << 0);
  a2:	2b b1       	in	r18, 0x0b	; 11
  a4:	21 60       	ori	r18, 0x01	; 1
  a6:	2b b9       	out	0x0b, r18	; 11
		}
		if(c==2){
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	91 05       	cpc	r25, r1
  ac:	19 f4       	brne	.+6      	; 0xb4 <main+0x34>
			PORTD |= (1 << 1);
  ae:	2b b1       	in	r18, 0x0b	; 11
  b0:	22 60       	ori	r18, 0x02	; 2
  b2:	2b b9       	out	0x0b, r18	; 11
		}
		if(c==3){
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	91 05       	cpc	r25, r1
  b8:	41 f7       	brne	.-48     	; 0x8a <main+0xa>
			PORTD &= ~(1<<0);
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1<<1);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	df cf       	rjmp	.-66     	; 0x86 <main+0x6>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
