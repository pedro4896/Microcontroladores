
pwmRegistradores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c5  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000632  00000000  00000000  00000925  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000269  00000000  00000000  00000f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036b  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

unsigned char i = 0;
int ms = 0;
int rotina = 0;
int main(void){
	cli();
  90:	f8 94       	cli
	
	DDRD = (1<<6) | (1<<5);
  92:	80 e6       	ldi	r24, 0x60	; 96
  94:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00); // PWM rápido com incremento com estouro em 255
  96:	83 ea       	ldi	r24, 0xA3	; 163
  98:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01) | (1<<CS00); //PRESCALER 1:64
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	85 bd       	out	0x25, r24	; 37
	
	TCCR2A = 0;
  9e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<CS22); // PRESCALER 1:64 no TIMER 2
  a2:	84 e0       	ldi	r24, 0x04	; 4
  a4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = (1<<TOIE2); // habilita a interrupção por estouro
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TCNT2 = 5;
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	sei();
  b4:	78 94       	sei
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x26>

000000b8 <__vector_9>:
    while (1) {}
}

ISR(TIMER2_OVF_vect){
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	ms++;
  c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ms>
  ca:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ms+0x1>
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ms+0x1>
  d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ms>
	TCNT2 = 5;
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	if(rotina == 0){
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e6:	89 2b       	or	r24, r25
  e8:	b9 f4       	brne	.+46     	; 0x118 <__vector_9+0x60>
		if(ms == 10){
  ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ms>
  ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ms+0x1>
  f2:	0a 97       	sbiw	r24, 0x0a	; 10
  f4:	29 f5       	brne	.+74     	; 0x140 <__vector_9+0x88>
			ms = 0;
  f6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ms+0x1>
  fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ms>
			OCR0A++;
  fe:	87 b5       	in	r24, 0x27	; 39
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	87 bd       	out	0x27, r24	; 39
			if(OCR0A == 255){
 104:	87 b5       	in	r24, 0x27	; 39
 106:	8f 3f       	cpi	r24, 0xFF	; 255
 108:	d9 f4       	brne	.+54     	; 0x140 <__vector_9+0x88>
				rotina = 1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	14 c0       	rjmp	.+40     	; 0x140 <__vector_9+0x88>
			}
		}
	} else{
		if(ms == 10){
 118:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ms>
 11c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ms+0x1>
 120:	0a 97       	sbiw	r24, 0x0a	; 10
 122:	71 f4       	brne	.+28     	; 0x140 <__vector_9+0x88>
			ms = 0;
 124:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ms+0x1>
 128:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ms>
			OCR0A--;
 12c:	87 b5       	in	r24, 0x27	; 39
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	87 bd       	out	0x27, r24	; 39
			if(OCR0A == 0){
 132:	87 b5       	in	r24, 0x27	; 39
 134:	81 11       	cpse	r24, r1
 136:	04 c0       	rjmp	.+8      	; 0x140 <__vector_9+0x88>
				rotina = 0;
 138:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
	}

}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
