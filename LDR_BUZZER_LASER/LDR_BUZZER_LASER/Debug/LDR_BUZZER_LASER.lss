
LDR_BUZZER_LASER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000205  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001395  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <avr/io.h>
#include <util/delay.h> //Só funcionar se definir a frequência do cristal

int main(void){
	DDRD = 0b01111111;
  80:	8f e7       	ldi	r24, 0x7F	; 127
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  84:	1b b8       	out	0x0b, r1	; 11
    while (1) { //loop infinito
		if(PIND&(1 << 7)){ // verifica estado do ldr (ausência de luz retorna 1 / presença de luz retorna 0)
  86:	4f 9b       	sbis	0x09, 7	; 9
  88:	0a c0       	rjmp	.+20     	; 0x9e <main+0x1e>
			PORTD &= ~(1 << 6); //desliga led verde
  8a:	8b b1       	in	r24, 0x0b	; 11
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << 5); //liga led vermelho
  90:	8b b1       	in	r24, 0x0b	; 11
  92:	80 62       	ori	r24, 0x20	; 32
  94:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << 4); //liga buzzer
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	80 61       	ori	r24, 0x10	; 16
  9a:	8b b9       	out	0x0b, r24	; 11
  9c:	f4 cf       	rjmp	.-24     	; 0x86 <main+0x6>
		} else{
			PORTD |= (1 << 6); //liga led verde
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1 << 5); //desliga led vermelho
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	8f 7d       	andi	r24, 0xDF	; 223
  a8:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1 << 4); //desliga buzzer
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	ea cf       	rjmp	.-44     	; 0x86 <main+0x6>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
